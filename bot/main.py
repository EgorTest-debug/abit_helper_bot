
import os
import asyncio
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN

class UserState(StatesGroup):
    background = State()

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "data")

with open(os.path.join(DATA_DIR, "parsed_ai_plan.json"), encoding="utf-8") as f:
    ai_plan = json.load(f)
with open(os.path.join(DATA_DIR, "parsed_ai_product_plan.json"), encoding="utf-8") as f:
    product_plan = json.load(f)

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã", callback_data="begin")]
    ])
    await message.answer("üöÄ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞–º–∏: \n\n1. ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n2. üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π AI\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)

@dp.callback_query(F.data == "begin")
async def ask_background(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.background)
    await callback.message.edit_text(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:\n\n‚Ä¢ –ß—Ç–æ –≤—ã –∏–∑—É—á–∞–ª–∏ –∏–ª–∏ —á–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å?\n‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–Ω–∞–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: Python, SQL, Tableau, Django, TensorFlow –∏ —Ç.–¥.\n‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ç.–ø.?"
    )

@dp.message(UserState.background)
async def process_background(message: types.Message, state: FSMContext):
    background_text = message.text.lower()

    ai_keywords = [
        "–º–∞—à–∏–Ω", "ml", "ai", "tensorflow", "pytorch", "data science", "–Ω–µ–π—Ä–æ–Ω", "nlp",
        "–æ–±—É—á–µ–Ω–∏–µ", "python", "gpu", "cuda", "–º–∞—Ç–µ–º", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–≥–ª—É–±–æ–∫–æ–µ", "—Ä–µ–∫–æ–º–µ–Ω–¥", "—Å—Ç–∞—Ç–∏—Å—Ç",
        "scikit", "pandas", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "classification", "regression", "–∫–ª–∞—Å—Ç–µ—Ä", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü"
    ]
    product_keywords = [
        "sql", "product", "—Ç–∞–±–ª–∏—Ü", "ux", "ui", "–±–∏–∑–Ω–µ—Å", "tableau", "powerbi", "mvp",
        "–∞–Ω–∞–ª–∏—Ç", "–ø—Ä–æ–µ–∫—Ç", "jira", "—É–ø—Ä–∞–≤", "–º–∞—Ä–∫–µ—Ç", "—Ñ–∏–Ω–∞–Ω—Å", "hci", "–∏—Å—Å–ª–µ–¥", "–ø—Ä–æ—Ç–æ—Ç–∏–ø", "a/b",
        "amplitude", "mixpanel", "retention", "conversion", "unit economy", "kpi", "figma"
    ]

    score_ai = sum(1 for word in ai_keywords if word in background_text)
    score_product = sum(1 for word in product_keywords if word in background_text)

    if score_ai > score_product:
        direction = "ü§ñ *–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç*"
        plan = ai_plan
        plan_type = "ai"
    elif score_product > score_ai:
        direction = "üì¶ *AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π*"
        plan = product_plan
        plan_type = "product"
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return

    # –ù–∞–π–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    elective_matches = []
    for course in plan:
        if course.get("type") == "–≤—ã–±–æ—Ä–Ω–∞—è":
            name = course.get("name", "").lower()
            if any(kw in name for kw in ai_keywords + product_keywords if kw in background_text):
                elective_matches.append(course)

    text = f"üîç –ü–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
    if elective_matches:
        text += "üéØ –í–∞–º –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n"
        for c in elective_matches[:5]:
            text += f"‚Ä¢ {c['name']} ({c['credits']} –ó–ï–¢, —Å–µ–º–µ—Å—Ç—Ä {c['semester']})\n"
        text += "\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –≤—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º."
    else:
        text += "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º."

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º", callback_data=f"show_semesters_{plan_type}")],
        [InlineKeyboardButton(text="üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="begin")]
    ])
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)
    await state.clear()
    await state.update_data(chosen_plan=plan_type)

@dp.callback_query(F.data.startswith("show_semesters_"))
async def semester_selection(callback: types.CallbackQuery, state: FSMContext):
    plan_type = callback.data.split("_")[-1]
    await state.update_data(chosen_plan=plan_type)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìö –°–µ–º–µ—Å—Ç—Ä {i}", callback_data=f"sem_{i}")] for i in range(1, 5)
    ] + [[InlineKeyboardButton(text="üîÅ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="begin")]])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=kb)

@dp.callback_query(F.data.startswith("sem_"))
async def show_courses(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    plan_type = user_data.get("chosen_plan", "ai")
    plan = ai_plan if plan_type == "ai" else product_plan
    sem = int(callback.data.split("_")[1])

    obligatory = [c for c in plan if int(c["semester"]) == sem and c["type"] == "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è"]
    elective = [c for c in plan if int(c["semester"]) == sem and c["type"] == "–≤—ã–±–æ—Ä–Ω–∞—è"]

    text = f"üìñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞ {sem} —Å–µ–º–µ—Å—Ç—Ä:\n\n"
    if obligatory:
        text += "üîπ *–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:*\n" + "\n".join(f"‚Ä¢ {c['name']} ({c['credits']} –ó–ï–¢)" for c in obligatory) + "\n"
    if elective:
        text += "\nüî∏ *–í—ã–±–æ—Ä–Ω—ã–µ:*\n" + "\n".join(f"‚Ä¢ {c['name']} ({c['credits']} –ó–ï–¢)" for c in elective)
    if not obligatory and not elective:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º."

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–º–µ—Å—Ç—Ä–∞–º", callback_data=f"show_semesters_{plan_type}")],
        [InlineKeyboardButton(text="üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="begin")]
    ])
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
